pipeline{
  agent any

  stages {
    stage ('git clone') {
      steps {
        git 'https://github.com/ww-insight/devops-edu-cert-task.git'
      }
    }
    stage ('Terraform VM') {
      agent any
      steps {
        sh '''
          export $(grep -v '^#' /var/jenkins_home/secrets/secret.tfvar | tr -d "[:blank:]" | tr -d '"' | xargs -d '\n')
          mkdir -p $YA_KEY_FOLDER
          if [ ! -f $YA_KEY_FOLDER/id_rsa ]; then ssh-keygen -N '' -f $YA_KEY_FOLDER/id_rsa; fi
          cd jenkins-pipelines
          terraform init
          terraform apply -var-file /var/jenkins_home/secrets/secret.tfvar -auto-approve
          rm -f /root/.ssh/known_hosts
        '''
      }
    }
    stage ('apply Ansible playbook') {
      steps {
        sh '''
          export $(grep -v '^#' /var/jenkins_home/secrets/secret.tfvar | tr -d "[:blank:]" | tr -d '"' | xargs -d '\n')
          cd jenkins-pipelines
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook -i hosts.ini --private-key=$YA_KEY_FOLDER/id_rsa setup-docker.yml
        '''
      }
    }

    stage ('build container') {
      steps {
        script
        {
          props = new Properties()
          File propertiesFile = new File("/var/jenkins_home/secrets/secret.tfvar")
          props.load(propertiesFile.newDataInputStream())
          docker.withServer('tcp://devops-builder:4243') {
            docker.withRegistry('https://cr.yandex', 'ya-cloud-cred'){
              def fields = env.getEnvironment()
              docker.build("cr.yandex/${props['YA_DOCKER_REG'].replaceAll('"', '')}/boxfuse","./jenkins-pipelines").push()
            }
          }
        }
      }
    }
    stage ('up container') {
      steps{
        props = new Properties()
        File propertiesFile = new File("/var/jenkins_home/secrets/secret.tfvar")
        props.load(propertiesFile.newDataInputStream())

        docker.withServer('tcp://devops-prod:4243') {
          docker.withRegistry('https://cr.yandex', 'ya-cloud-cred'){
            def fields = env.getEnvironment()
            docker.image("cr.yandex/${props['YA_DOCKER_REG'].replaceAll('"', '')}/boxfuse").run('-p 8080:8080')
          }
        }
      }
    }
  }

}